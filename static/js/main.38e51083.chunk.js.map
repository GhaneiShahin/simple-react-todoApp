{"version":3,"sources":["components/Todo.js","components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["Todo","state","showEdit","handleShow","setState","this","props","todos","deleted","edited","btnIcon","Modal","Dialog","Header","className","Title","Footer","Button","onClick","FormControl","type","placeholder","onChange","variant","Component","Todos","map","t","key","id","theTodo","e","App","todo","show","set","target","value","add","Math","floor","random","push","toast","success","handleDelete","f","filter","findeIndex","findIndex","error","handleEdit","allTodos","handleSubmit","preventDefault","btnColor","badgeColor","todosCount","length","Alert","Heading","Badge","pill","Form","onSubmit","InputGroup","Append","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.38e51083.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport {Modal, Button, FormControl} from 'react-bootstrap';\n\nclass Todo extends Component {\n      state = {\n            showEdit: false\n      }\n\n      handleShow = () => {\n            this.setState({showEdit: !this.state.showEdit});\n      }\n      render() {\n            const {showEdit} = this.state;\n            const {todos, deleted, edited} = this.props;\n            const btnIcon = showEdit ? \"fa fa-save\" : \"fa fa-edit\";\n            return (\n                  <Modal.Dialog>\n                        <Modal.Header className=\"d-flex justify-content-center\">\n                              <Modal.Title>\n                                    {todos}\n                              </Modal.Title>\n                        </Modal.Header>\n                        <Modal.Footer className=\"d-flex justify-content-center\">\n                              <Button className={`${btnIcon}`} onClick={this.handleShow}/>\n                              {showEdit ?\n                                    <FormControl type=\"text\"\n                                          className=\"w-50\"\n                                          placeholder={todos}\n                                          onChange={edited}/>\n                              : null\n                              }\n                              <Button variant=\"danger\"\n                                    className=\"fa fa-trash\"\n                                    onClick={deleted} />\n                        </Modal.Footer>\n\n                  </Modal.Dialog>\n            );\n      }\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from './Todo';\n\nconst Todos = ({todos, deleted, edited}) => {\n      return (\n            <div>\n                  {todos.map(t => (\n                        <Todo\n                              key={t.id}\n                              todos={t.theTodo}\n                              deleted={() => deleted(t.id)}\n                              edited={e => edited(e, t.id)}/>\n                  ))}\n            </div>\n       );\n}\n\nexport default Todos;","import React, { Component } from 'react';\nimport Todos from './components/Todos';\nimport {\n      Alert,\n      Form,\n      InputGroup,\n      Button,\n      FormControl,\n      Badge,\n      } from 'react-bootstrap';\n\n      import { ToastContainer, toast } from 'react-toastify';\n\nclass App extends Component {\n      state = {\n            todos: [],\n            todo: '',\n            show: false\n      }\n\n      handleShow = () => {\n            this.setState({show: !this.state.show});\n      }\n\n      set = e => {\n            this.setState({todo: e.target.value})\n      }\n      add = () => {\n            const todos = [...this.state.todos];\n            const todo = {\n                  id: Math.floor(Math.random() * 100000),\n                  theTodo: this.state.todo\n            }\n\n            if(todo.theTodo !== \"\" && todo.theTodo !== \" \") {\n                  todos.push(todo);\n                  this.setState({todos, todo:''});\n                  toast.success(\"New Todo added successfully!\");\n            }\n      }\n\n      handleDelete = id => {\n            const todos = [...this.state.todos];\n            const f = todos.filter(t => t.id !== id);\n            this.setState({todos: f});\n\n            const findeIndex = todos.findIndex(t => t.id === id);\n            const todo = todos[findeIndex];\n            toast.error(`#${todo.id} deleted succesfully!`);\n      }\n      handleEdit = (e, id) => {\n            const {todos: allTodos} = this.state;\n            const findeIndex = allTodos.findIndex(t => t.id === id);\n            const todo = allTodos[findeIndex];\n            todo.theTodo = e.target.value;\n            const todos = [...allTodos];\n            todo[findeIndex] = todos\n            this.setState({todos})\n      }\n      handleSubmit = e => {\n            e.preventDefault();\n      }\n      render() {\n            const {todos, show} = this.state;\n\n            const btnColor = show ? 'outline-danger' : 'outline-primary';\n            const btnIcon = show ? 'fa fa-arrow-up' : 'fa fa-arrow-down';\n\n            let todo = null;\n            let badgeColor = '';\n            const todosCount = todos.length;\n\n            if(todosCount >= 7) badgeColor = \"success\";\n            if(todosCount <= 6) badgeColor = \"warning\";\n            if(todosCount <= 2) badgeColor = \"danger\";\n\n            if(show) {\n                  todo = <Todos todos={todos} deleted={this.handleDelete} edited={this.handleEdit}/>\n            }\n            return (\n                  <div className=\"text-center\">\n                        <Alert variant=\"info\">\n                              <Alert.Heading>TODO APP</Alert.Heading>\n                              <hr />\n                              <div>\n                                    <h6>\n                                          WE HAVE\n                                                <Badge pill variant={`${badgeColor}`} className=\"m-1\">\n                                                      {todosCount}\n                                                </Badge>\n                                          TODOS\n                                    </h6>\n                              </div>\n                        </Alert>\n                        <div className=\"mt-3\">\n                              <Form className=\"mb-4 mt-5 d-flex justify-content-center\"\n                              onSubmit={this.handleSubmit}>\n                                    <InputGroup className=\"w-50\">\n                                          <FormControl\n                                                type=\"text\"\n                                                placeholder=\"Add Todos\"\n                                                onChange={this.set}\n                                                value={this.state.todo}\n                                          />\n                                          <InputGroup.Append>\n                                                <Button variant=\"outline-info\"\n                                                      className=\"fa fa-plus\"\n                                                      type=\"submit\"\n                                                      onClick={this.add} />\n                                          </InputGroup.Append>\n                                    </InputGroup>\n                              </Form>\n                              <Button variant={btnColor}\n                                    className={`${btnIcon}`}\n                                    onClick={this.handleShow} />\n                              {todo}\n                        </div>\n                        <ToastContainer/>\n                  </div>\n            );\n      }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/font-awesome/css/font-awesome.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}